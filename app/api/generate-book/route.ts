import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

// Inicializar OpenAI com a API Key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Sistema de configura√ß√£o detalhado para diferentes tamanhos de livro
const BOOK_SIZE_CONFIG = {
  pequeno: {
    label: "Pequeno",
    description: "Novela curta ou colet√¢nea de contos",
    pages: "40-60 p√°ginas",
    chapters: 4,
    wordsPerChapter: "800-1.200 palavras",
    estimatedWords: "3.000-5.000 palavras totais",
    maxTokens: 6000,
    model: "gpt-3.5-turbo",
    readingTime: "1-2 horas",
    target: "Leitura r√°pida e objetiva"
  },
  medio: {
    label: "M√©dio", 
    description: "Romance de extens√£o padr√£o",
    pages: "80-120 p√°ginas",
    chapters: 8,
    wordsPerChapter: "1.500-2.500 palavras",
    estimatedWords: "12.000-20.000 palavras totais",
    maxTokens: 12000,
    model: "gpt-3.5-turbo-16k",
    readingTime: "3-4 horas",
    target: "Leitura com desenvolvimento moderado"
  },
  grande: {
    label: "Grande",
    description: "Romance extenso com tramas complexas",
    pages: "150-200 p√°ginas",
    chapters: 12,
    wordsPerChapter: "2.000-3.500 palavras",
    estimatedWords: "24.000-42.000 palavras totais",
    maxTokens: 14000,
    model: "gpt-3.5-turbo-16k",
    readingTime: "5-7 horas",
    target: "Leitura imersiva e detalhada"
  },
  epico: {
    label: "√âpico",
    description: "Saga completa com m√∫ltiplos arcos",
    pages: "200-300 p√°ginas",
    chapters: 16,
    wordsPerChapter: "2.500-4.000 palavras",
    estimatedWords: "40.000-64.000 palavras totais",
    maxTokens: 16000,
    model: "gpt-3.5-turbo-16k",
    readingTime: "8-10 horas",
    target: "Experi√™ncia de leitura completa"
  }
};

// Fun√ß√£o para verificar disponibilidade do modelo 16k
async function verifyModelAccess(requestedModel: string): Promise<{available: boolean, fallbackModel: string}> {
  console.log(`üîç Verificando acesso ao modelo: ${requestedModel}`);
  
  // Se for o modelo padr√£o, assumir que est√° dispon√≠vel
  if (requestedModel === "gpt-3.5-turbo") {
    return { available: true, fallbackModel: "gpt-3.5-turbo" };
  }
  
  try {
    // Teste simples para verificar se o modelo est√° acess√≠vel
    const testCompletion = await openai.chat.completions.create({
      model: requestedModel,
      messages: [
        { 
          role: "user", 
          content: "Responda apenas com a palavra 'DISPONIVEL'" 
        }
      ],
      max_tokens: 10,
      temperature: 0.1
    });
    
    const response = testCompletion.choices[0]?.message?.content;
    
    if (response && response.includes("DISPONIVEL")) {
      console.log(`‚úÖ Modelo ${requestedModel} confirmado como dispon√≠vel`);
      return { available: true, fallbackModel: requestedModel };
    }
    
    throw new Error("Resposta de teste inv√°lida");
    
  } catch (error: any) {
    console.log(`‚ùå Modelo ${requestedModel} n√£o dispon√≠vel:`, error.message);
    
    // Determinar fallback apropriado
    const fallbackModel = "gpt-3.5-turbo";
    console.log(`üîÑ Usando fallback: ${fallbackModel}`);
    
    return { 
      available: false, 
      fallbackModel: fallbackModel 
    };
  }
}

// Fun√ß√£o para calcular estimativas precisas
function calculateBookMetrics(config: any, chapterCount: number) {
  const minWordsPerChapter = parseInt(config.wordsPerChapter.split('-')[0].replace(/\D/g, ''));
  const maxWordsPerChapter = parseInt(config.wordsPerChapter.split('-')[1].replace(/\D/g, ''));
  
  const estimatedMinWords = minWordsPerChapter * chapterCount;
  const estimatedMaxWords = maxWordsPerChapter * chapterCount;
  const estimatedAvgWords = (estimatedMinWords + estimatedMaxWords) / 2;
  
  // C√°lculo de p√°ginas (considerando ~250 palavras por p√°gina)
  const estimatedMinPages = Math.ceil(estimatedMinWords / 250);
  const estimatedMaxPages = Math.ceil(estimatedMaxWords / 250);
  
  // C√°lculo de tokens (considerando ~1.3 tokens por palavra)
  const estimatedTokens = Math.ceil(estimatedAvgWords * 1.3);
  
  return {
    estimatedMinWords,
    estimatedMaxWords,
    estimatedAvgWords,
    estimatedMinPages,
    estimatedMaxPages,
    estimatedTokens,
    wordsPerPage: 250,
    tokensPerWord: 1.3
  };
}

// Fun√ß√£o para validar e sanitizar a descri√ß√£o
function validateAndSanitizeDescription(description: string): {valid: boolean, sanitized: string, issues: string[]} {
  const issues: string[] = [];
  let sanitized = description.trim();
  
  // Verificar comprimento m√≠nimo
  if (sanitized.length < 20) {
    issues.push("Descri√ß√£o muito curta (m√≠nimo 20 caracteres)");
  }
  
  // Verificar comprimento m√°ximo (evitar overflow)
  if (sanitized.length > 10000) {
    issues.push("Descri√ß√£o muito longa, truncando para 10.000 caracteres");
    sanitized = sanitized.substring(0, 10000);
  }
  
  // Verificar conte√∫do v√°lido
  const wordCount = sanitized.split(/\s+/).length;
  if (wordCount < 5) {
    issues.push("Descri√ß√£o muito vaga (m√≠nimo 5 palavras)");
  }
  
  return {
    valid: issues.length === 0,
    sanitized: sanitized,
    issues: issues
  };
}

// Fun√ß√£o para criar prompt detalhado baseado no tamanho
function createDetailedPrompt(description: string, config: any, chapterCount: number, genre: string, audience: string) {
  const metrics = calculateBookMetrics(config, chapterCount);
  
  return `
# üé≠ CRIA√á√ÉO DE LIVRO PROFISSIONAL - ${config.label.toUpperCase()}

## üìã METADADOS DA OBRA:
- **T√çTULO**: [CRIE UM T√çTULO ORIGINAL E ATRAENTE]
- **EXTENS√ÉO**: ${config.pages} (${metrics.estimatedMinPages}-${metrics.estimatedMaxPages} p√°ginas)
- **CAP√çTULOS**: ${chapterCount} cap√≠tulos completos
- **PALAVRAS**: ${metrics.estimatedMinWords}-${metrics.estimatedMaxWords} palavras totais
- **G√äNERO**: ${genre || "Fic√ß√£o Cient√≠fica"}
- **P√öBLICO-ALVO**: ${audience || "Jovem Adulto"}
- **TEMPO DE LEITURA**: ${config.readingTime}

## üìñ PREMISSA ORIGINAL DO AUTOR:
"""
${description}
"""

## üéØ OBJETIVO CRIATIVO:
Transformar esta premissa em uma **OBRA COMPLETA** com profundidade narrativa, desenvolvimento de personagens e arco emocional satisfat√≥rio.

## üìö ESTRUTURA DE CADA CAP√çTULO:

### 1. ABERTURA (15% do cap√≠tulo)
- Cena inicial impactante que prende a aten√ß√£o
- Apresenta√ß√£o do contexto imediato
- Estabelecimento do tom emocional

### 2. DESENVOLVIMENTO (60% do cap√≠tulo)
- Progress√£o natural da trama
- Di√°logos realistas e significativos
- Desenvolvimento de personagens
- Conflitos e tens√µes
- Descri√ß√µes sensoriais (visuais, auditivas, emocionais)

### 3. CL√çMAX (15% do cap√≠tulo) 
- Ponto de tens√£o m√°xima no cap√≠tulo
- Revela√ß√µes importantes
- Viradas na trama

### 4. RESOLU√á√ÉO/GANCHO (10% do cap√≠tulo)
- Conclus√£o parcial dos eventos
- Prepara√ß√£o para o pr√≥ximo cap√≠tulo
- Manuten√ß√£o do interesse do leitor

## ‚úçÔ∏è DIRECTRIZES DE ESCRITA:

### PERSONAGENS:
- Desenvolva personagens tridimensionais com motiva√ß√µes claras
- Mostre evolu√ß√£o emocional ao longo da narrativa
- Crie di√°logos que revelem personalidade e avan√ßem a trama

### NARRATIVA:
- Mantenha coer√™ncia com a premissa original
- Use linguagem apropriada para o p√∫blico-alvo
- Varie o ritmo conforme a necessidade dram√°tica
- Inclua elementos espec√≠ficos do g√™nero ${genre}

### DESCRI√á√ïES:
- Seja v√≠vido mas n√£o excessivamente detalhado
- Engaje todos os sentidos do leitor
- Crie atmosfera e mood consistentes

## üìä EXIG√äNCIAS T√âCNICAS POR CAP√çTULO:
- **Di√°logos**: M√≠nimo 3-5 trocas conversacionais significativas
- **Descri√ß√µes**: 2-3 par√°grafos descritivos ricos em detalhes sensoriais
- **A√ß√µes**: Progress√£o clara de eventos e consequ√™ncias
- **Emo√ß√µes**: Desenvolvimento emocional dos personagens principais

## üé™ EXEMPLO DE CAP√çTULO BEM ESTRUTURADO:

**T√≠tulo:** "O Eco do Vazio"

**Conte√∫do:**
"Caio sentiu o ar ficar pesado antes mesmo de os alarmes soarem. Suas m√£os, normalmente firmes, tremiam levemente sobre os controles. 'Lis, voc√™ est√° vendo isso?' 

A voz dela veio distorcida pelo comunicador: 'Os sensores est√£o enlouquecendo, Caio. √â como se... como se o pr√≥prio espa√ßo estivesse se desfazendo.'

Ele olhou para as leituras, seus olhos se arregalando ao ver os n√∫meros dan√ßarem de forma imposs√≠vel. 'Isso n√£o √© um mau funcionamento', sussurrou, o suor frio escorrendo por suas costas. '√â uma ruptura.'

De repente, as luzes piscaram violentamente. Quando se restabeleceram, a porta do corredor Leste havia simplesmente... desaparecido. No seu lugar, uma parede lisa e cont√≠nua, como se a abertura nunca tivesse existido.

'Meu Deus', Lis engoliu seco. 'Ele est√° se expandindo.'

Caio pegou seu di√°rio, suas anota√ß√µes agora parecendo fr√°geis diante da magnitude do que testemunhavam. 'Precisamos avisar os outros', disse, mas sabia que era in√∫til. Quem acreditaria em algo que desafiava as pr√≥prias leis da realidade?"

## üìÑ FORMATO DE RESPOSTA EXATO (APENAS JSON V√ÅLIDO):

\`\`\`json
{
  "title": "T√≠tulo Criativo e Relevante Aqui",
  "synopsis": "Sinopse detalhada de 3-4 par√°grafos que captura a ess√™ncia da obra, apresenta os personagens principais, estabelece o conflito central e cria expectativa no leitor. Deve ser envolvente e representar fielmente o conte√∫do do livro.",
  "chapters": [
    {
      "title": "T√≠tulo do Cap√≠tulo 1 - Criativo e Sugestivo",
      "content": "Conte√∫do completo do cap√≠tulo 1 seguindo rigorosamente a estrutura definida: abertura impactante, desenvolvimento com di√°logos e descri√ß√µes, cl√≠max emocionante e resolu√ß√£o com gancho. M√≠nimo 5-7 par√°grafos ricos em detalhes narrativos."
    }
  ]
}
\`\`\`

## ‚ö†Ô∏è REGRAS FINAIS:
1. **N√ÉO** repita literalmente a descri√ß√£o original - expanda-a criativamente
2. **MANTENHA** todos os elementos essenciais da premissa
3. **DESENVOLVA** conte√∫do original e envolvente
4. **RESPEITE** o g√™nero e p√∫blico-alvo especificados
5. **SIGA** a estrutura de cap√≠tulos definida
6. **USE** linguagem rica mas acess√≠vel

**IMPORTANTE:** Cada cap√≠tulo deve ser uma unidade narrativa completa e satisfat√≥ria por si s√≥, enquanto contribui para o arco geral da obra.
`;
}

// Fun√ß√£o para processar e validar a resposta da OpenAI
function processOpenAIResponse(content: string, expectedChapters: number) {
  console.log('üîß Processando resposta da OpenAI...');
  
  if (!content) {
    throw new Error('Resposta vazia da OpenAI');
  }
  
  // Log para debug
  console.log(`üìÑ Conte√∫do recebido (primeiros 500 chars): ${content.substring(0, 500)}...`);
  
  let parsedData;
  
  // Tentativa 1: Parse direto
  try {
    parsedData = JSON.parse(content);
    console.log('‚úÖ Parse JSON direto bem-sucedido');
  } catch (directError) {
    console.log('‚ö†Ô∏è Parse direto falhou, tentando extra√ß√£o de JSON...');
    
    // Tentativa 2: Extrair JSON do conte√∫do
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      try {
        parsedData = JSON.parse(jsonMatch[0]);
        console.log('‚úÖ JSON extra√≠do com sucesso');
      } catch (extractionError) {
        console.log('‚ùå Falha na extra√ß√£o de JSON');
        throw new Error('N√£o foi poss√≠vel extrair JSON v√°lido da resposta');
      }
    } else {
      throw new Error('Nenhum JSON encontrado na resposta');
    }
  }
  
  // Valida√ß√£o da estrutura b√°sica
  if (!parsedData.title || typeof parsedData.title !== 'string') {
    console.log('‚ö†Ô∏è T√≠tulo inv√°lido ou ausente, aplicando corre√ß√£o...');
    parsedData.title = "Livro Gerado por IA";
  }
  
  if (!parsedData.synopsis || typeof parsedData.synopsis !== 'string') {
    console.log('‚ö†Ô∏è Sinopse inv√°lida ou ausente, aplicando corre√ß√£o...');
    parsedData.synopsis = "Uma narrativa envolvente desenvolvida atrav√©s de intelig√™ncia artificial.";
  }
  
  if (!parsedData.chapters || !Array.isArray(parsedData.chapters)) {
    console.log('‚ö†Ô∏è Estrutura de cap√≠tulos inv√°lida, criando array vazio...');
    parsedData.chapters = [];
  }
  
  // Validar e corrigir cada cap√≠tulo
  parsedData.chapters = parsedData.chapters.map((chapter: any, index: number) => {
    if (!chapter || typeof chapter !== 'object') {
      return {
        title: `Cap√≠tulo ${index + 1}`,
        content: `Conte√∫do do cap√≠tulo ${index + 1} em desenvolvimento.`
      };
    }
    
    return {
      title: chapter.title && typeof chapter.title === 'string' ? chapter.title : `Cap√≠tulo ${index + 1}`,
      content: chapter.content && typeof chapter.content === 'string' ? chapter.content : `Desenvolvimento narrativo do cap√≠tulo ${index + 1}.`
    };
  });
  
  // Garantir n√∫mero m√≠nimo de cap√≠tulos
  while (parsedData.chapters.length < expectedChapters) {
    parsedData.chapters.push({
      title: `Cap√≠tulo ${parsedData.chapters.length + 1}`,
      content: `Este cap√≠tulo expande a narrativa principal com desenvolvimento adicional da trama.`
    });
  }
  
  // Limitar ao n√∫mero m√°ximo esperado
  if (parsedData.chapters.length > expectedChapters) {
    parsedData.chapters = parsedData.chapters.slice(0, expectedChapters);
  }
  
  return parsedData;
}

// Fun√ß√£o principal da API Route
export async function POST(request: NextRequest) {
  const startTime = Date.now();
  console.log('üöÄ === INICIANDO GERA√á√ÉO DE LIVRO PROFISSIONAL ===');
  
  try {
    // Parse e valida√ß√£o do request
    let requestBody;
    try {
      requestBody = await request.json();
    } catch (parseError) {
      console.log('‚ùå Erro no parse do JSON do request:', parseError);
      return NextResponse.json(
        { 
          error: 'Formato de requisi√ß√£o inv√°lido',
          details: 'O corpo da requisi√ß√£o deve ser um JSON v√°lido'
        },
        { status: 400 }
      );
    }
    
    const { description, size, genre, audience, chapterCount } = requestBody;
    
    // Log dos par√¢metros recebidos
    console.log('üìã PAR√ÇMETROS RECEBIDOS:');
    console.log(`   ‚Ä¢ Tamanho: ${size}`);
    console.log(`   ‚Ä¢ G√™nero: ${genre}`);
    console.log(`   ‚Ä¢ P√∫blico: ${audience}`);
    console.log(`   ‚Ä¢ Cap√≠tulos solicitados: ${chapterCount}`);
    console.log(`   ‚Ä¢ Comprimento da descri√ß√£o: ${description?.length} caracteres`);
    
    // Valida√ß√µes iniciais
    if (!description) {
      return NextResponse.json(
        { error: 'Descri√ß√£o √© obrigat√≥ria' },
        { status: 400 }
      );
    }
    
    const validation = validateAndSanitizeDescription(description);
    if (!validation.valid) {
      console.log('‚ùå Problemas na valida√ß√£o:', validation.issues);
      return NextResponse.json(
        { 
          error: 'Descri√ß√£o inv√°lida',
          issues: validation.issues
        },
        { status: 400 }
      );
    }
    
    if (!size || !BOOK_SIZE_CONFIG[size as keyof typeof BOOK_SIZE_CONFIG]) {
      return NextResponse.json(
        { 
          error: 'Tamanho inv√°lido',
          validSizes: Object.keys(BOOK_SIZE_CONFIG)
        },
        { status: 400 }
      );
    }
    
    // Configura√ß√£o base
    let config = BOOK_SIZE_CONFIG[size as keyof typeof BOOK_SIZE_CONFIG];
    const finalChapterCount = chapterCount || config.chapters;
    
    console.log(`üéØ CONFIGURA√á√ÉO INICIAL: ${config.label}`);
    console.log(`   ‚Ä¢ P√°ginas: ${config.pages}`);
    console.log(`   ‚Ä¢ Cap√≠tulos: ${finalChapterCount}`);
    console.log(`   ‚Ä¢ Modelo: ${config.model}`);
    console.log(`   ‚Ä¢ Tokens: ${config.maxTokens}`);
    
    // Verificar acesso ao modelo
    const modelAccess = await verifyModelAccess(config.model);
    if (!modelAccess.available) {
      console.log(`üîÑ Ajustando configura√ß√£o para usar ${modelAccess.fallbackModel}`);
      config = {
        ...config,
        model: modelAccess.fallbackModel,
        maxTokens: Math.min(config.maxTokens, 3500),
        pages: `~${Math.ceil(parseInt(config.pages.split('-')[0]) / 1.5)} p√°ginas`
      };
    }
    
    // C√°lculos de estimativa
    const metrics = calculateBookMetrics(config, finalChapterCount);
    console.log('üìä ESTIMATIVAS DETALHADAS:');
    console.log(`   ‚Ä¢ Palavras totais: ${metrics.estimatedMinWords}-${metrics.estimatedMaxWords}`);
    console.log(`   ‚Ä¢ P√°ginas: ${metrics.estimatedMinPages}-${metrics.estimatedMaxPages}`);
    console.log(`   ‚Ä¢ Tokens estimados: ${metrics.estimatedTokens}`);
    console.log(`   ‚Ä¢ Tokens configurados: ${config.maxTokens}`);
    
    // Criar prompt detalhado
    const detailedPrompt = createDetailedPrompt(
      validation.sanitized, 
      config, 
      finalChapterCount, 
      genre || "Fic√ß√£o", 
      audience || "Adulto"
    );
    
    console.log('ü§ñ SOLICITANDO GERA√á√ÉO √Ä OPENAI...');
    console.log(`   ‚Ä¢ Modelo: ${config.model}`);
    console.log(`   ‚Ä¢ Tokens: ${config.maxTokens}`);
    console.log(`   ‚Ä¢ Cap√≠tulos: ${finalChapterCount}`);
    
    // Chamada para OpenAI
    const completion = await openai.chat.completions.create({
      model: config.model,
      messages: [
        {
          role: "system",
          content: `Voc√™ √© um escritor profissional e editor experiente. 
          Sua especialidade √© criar obras liter√°rias completas, bem estruturadas e envolventes.
          Voc√™ sempre segue rigorosamente as diretrizes fornecidas e formata sua resposta em JSON v√°lido.
          Sua miss√£o √© criar livros que sejam satisfat√≥rios tanto em conte√∫do quanto em estrutura.`
        },
        {
          role: "user",
          content: detailedPrompt
        }
      ],
      max_tokens: config.maxTokens,
      temperature: 0.75,
      top_p: 0.9,
    });
    
    const generationTime = Date.now() - startTime;
    console.log(`‚úÖ RESPOSTA DA OPENAI RECEBIDA em ${generationTime}ms`);
    console.log(`   ‚Ä¢ Tokens usados: ${completion.usage?.total_tokens || 'N/A'}`);
    console.log(`   ‚Ä¢ Tokens de prompt: ${completion.usage?.prompt_tokens || 'N/A'}`);
    console.log(`   ‚Ä¢ Tokens de completion: ${completion.usage?.completion_tokens || 'N/A'}`);
    
    // Processar resposta
    const content = completion.choices[0]?.message?.content;
    const bookData = processOpenAIResponse(content, finalChapterCount);
    
    // C√°lculo de estat√≠sticas finais
    const totalContentLength = bookData.chapters.reduce((sum: number, chapter: any) => 
      sum + (chapter.content?.length || 0), 0);
    
    const avgChapterLength = totalContentLength / bookData.chapters.length;
    const estimatedPages = Math.ceil(totalContentLength / 1800); // ~1800 chars por p√°gina
    const estimatedReadingTime = Math.ceil(estimatedPages / 3); // ~3 p√°ginas por minuto
    
    console.log('üìà ESTAT√çSTICAS FINAIS DO LIVRO:');
    console.log(`   ‚Ä¢ T√≠tulo: ${bookData.title}`);
    console.log(`   ‚Ä¢ Cap√≠tulos gerados: ${bookData.chapters.length}`);
    console.log(`   ‚Ä¢ Total de caracteres: ${totalContentLength}`);
    console.log(`   ‚Ä¢ P√°ginas estimadas: ${estimatedPages}`);
    console.log(`   ‚Ä¢ M√©dia por cap√≠tulo: ${Math.ceil(avgChapterLength)} caracteres`);
    console.log(`   ‚Ä¢ Tempo de leitura: ~${estimatedReadingTime} minutos`);
    console.log(`   ‚Ä¢ Modelo utilizado: ${config.model}`);
    
    // Metadados completos
    bookData.metadata = {
      generation: {
        model: config.model,
        tokensUsed: completion.usage?.total_tokens,
        generationTime: generationTime,
        timestamp: new Date().toISOString()
      },
      bookInfo: {
        size: config.label,
        estimatedPages: estimatedPages,
        estimatedReadingTime: `${estimatedReadingTime} minutos`,
        totalChapters: bookData.chapters.length,
        totalCharacters: totalContentLength,
        genre: genre || "Fic√ß√£o",
        audience: audience || "Adulto"
      },
      technical: {
        has16kAccess: modelAccess.available,
        maxTokensConfig: config.maxTokens,
        finalModel: config.model
      }
    };
    
    const totalTime = Date.now() - startTime;
    console.log(`üéâ === GERA√á√ÉO CONCLU√çDA COM SUCESSO em ${totalTime}ms ===`);
    
    return NextResponse.json(bookData);
    
  } catch (error: any) {
    const errorTime = Date.now() - startTime;
    console.error(`üí• === ERRO NA GERA√á√ÉO em ${errorTime}ms ===`);
    console.error('Detalhes do erro:', error);
    
    // An√°lise detalhada do erro
    const errorAnalysis = {
      message: error.message,
      code: error.code,
      status: error.status,
      type: error.type,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    };
    
    console.log('üîç AN√ÅLISE DO ERRO:', errorAnalysis);
    
    // Tratamento espec√≠fico de erros da OpenAI
    if (error?.code === 'invalid_api_key') {
      return NextResponse.json(
        { 
          error: 'Chave da API inv√°lida',
          solution: 'Verifique a OPENAI_API_KEY no Vercel'
        },
        { status: 401 }
      );
    } else if (error?.code === 'insufficient_quota') {
      return NextResponse.json(
        { 
          error: 'Cota insuficiente',
          solution: 'Verifique seu saldo em platform.openai.com/usage'
        },
        { status: 429 }
      );
    } else if (error?.code === 'model_not_found') {
      return NextResponse.json(
        { 
          error: 'Modelo n√£o dispon√≠vel',
          solution: 'Verifique se tem acesso ao modelo solicitado'
        },
        { status: 400 }
      );
    } else if (error?.status === 429) {
      return NextResponse.json(
        { 
          error: 'Limite de taxa excedido',
          solution: 'Aguarde alguns minutos e tente novamente'
        },
        { status: 429 }
      );
    } else if (error?.message?.includes('JSON')) {
      return NextResponse.json(
        { 
          error: 'Problema no formato da resposta',
          solution: 'Tente com uma descri√ß√£o mais clara ou menos complexa'
        },
        { status: 500 }
      );
    }
    
    // Erro gen√©rico
    return NextResponse.json(
      { 
        error: 'Erro interno na gera√ß√£o do livro',
        details: process.env.NODE_ENV === 'development' ? error.message : 'Entre em contato com o suporte'
      },
      { status: 500 }
    );
  }
}
