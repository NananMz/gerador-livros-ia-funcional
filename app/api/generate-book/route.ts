import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Configura√ß√£o detalhada de tamanhos
const SIZE_CONFIG = {
  small: {
    pages: '80-120',
    chapters: '4-6',
    wordsPerChapter: '1500-2500',
    totalWords: '8000-15000',
    maxTokens: 6000,
    description: 'Livro curto focado em uma narrativa direta'
  },
  medium: {
    pages: '121-300', 
    chapters: '8-12',
    wordsPerChapter: '2500-4000',
    totalWords: '25000-50000',
    maxTokens: 12000,
    description: 'Romance padr√£o com desenvolvimento moderado'
  },
  large: {
    pages: '301-500',
    chapters: '15-20',
    wordsPerChapter: '3500-6000',
    totalWords: '60000-120000',
    maxTokens: 16000,
    description: 'Obra extensa com tramas complexas'
  },
  epic: {
    pages: '500+',
    chapters: '20-30',
    wordsPerChapter: '4000-8000',
    totalWords: '120000+',
    maxTokens: 20000,
    description: 'Saga √©pica com m√∫ltiplas subtramas'
  }
};

// C√°lculo preciso de tokens
function calculateTokenUsage(config: any, chapterCount: number) {
  const avgWordsPerChapter = (parseInt(config.wordsPerChapter.split('-')[0]) + 
                            parseInt(config.wordsPerChapter.split('-')[1])) / 2;
  
  const estimatedTotalWords = avgWordsPerChapter * chapterCount;
  const estimatedTokens = Math.ceil(estimatedTotalWords * 1.3); // Fator de seguran√ßa
  
  console.log(`üìä ESTIMATIVA DE USO DE TOKENS:`);
  console.log(`   ‚Ä¢ Cap√≠tulos: ${chapterCount}`);
  console.log(`   ‚Ä¢ Palavras por cap√≠tulo: ${config.wordsPerChapter}`);
  console.log(`   ‚Ä¢ Total estimado: ${estimatedTotalWords} palavras`);
  console.log(`   ‚Ä¢ Tokens estimados: ${estimatedTokens}`);
  console.log(`   ‚Ä¢ Limite configurado: ${config.maxTokens}`);
  
  return {
    estimatedTokens,
    isWithinLimit: estimatedTokens <= config.maxTokens,
    recommendation: estimatedTokens > config.maxTokens ? 
      `Recomendado: Reduzir para ${Math.floor(config.maxTokens / (avgWordsPerChapter * 1.3))} cap√≠tulos` : 
      'Dentro do limite seguro'
  };
}

// Sistema de parsing robusto
function parseBookContent(content: string, expectedChapters: number) {
  console.log('üîç Iniciando parse do conte√∫do...');
  console.log(`üìù Primeiros 300 chars: ${content.substring(0, 300)}...`);

  try {
    // Tentativa 1: Parse direto
    const directParse = JSON.parse(content);
    console.log('‚úÖ Parse direto bem-sucedido');
    return validateBookStructure(directParse, expectedChapters);
  } catch (e) {
    console.log('‚ö†Ô∏è Parse direto falhou, tentando extra√ß√£o...');
  }

  // Tentativa 2: Extrair JSON da resposta
  const jsonMatch = content.match(/\{[\s\S]*\}/);
  if (jsonMatch) {
    try {
      const extracted = JSON.parse(jsonMatch[0]);
      console.log('‚úÖ JSON extra√≠do com sucesso');
      return validateBookStructure(extracted, expectedChapters);
    } catch (e) {
      console.log('‚ùå JSON extra√≠do tamb√©m inv√°lido');
    }
  }

  // Tentativa 3: Fallback inteligente
  console.log('üîÑ Criando estrutura fallback...');
  return createFallbackStructure(content, expectedChapters);
}

function validateBookStructure(bookData: any, expectedChapters: number) {
  const issues = [];
  
  if (!bookData.title || bookData.title.length < 2) {
    issues.push('T√≠tulo inv√°lido');
    bookData.title = "Livro Gerado por IA";
  }
  
  if (!bookData.synopsis || bookData.synopsis.length < 50) {
    issues.push('Sinopse muito curta');
    bookData.synopsis = "Esta √© uma hist√≥ria √∫nica criada por intelig√™ncia artificial.";
  }
  
  if (!bookData.chapters || !Array.isArray(bookData.chapters)) {
    issues.push('Estrutura de cap√≠tulos inv√°lida');
    bookData.chapters = [];
  }
  
  // Validar cada cap√≠tulo
  bookData.chapters = bookData.chapters.map((chapter: any, index: number) => {
    if (!chapter.title || chapter.title.length < 2) {
      chapter.title = `Cap√≠tulo ${index + 1}`;
    }
    if (!chapter.content || chapter.content.length < 100) {
      chapter.content = `Conte√∫do do cap√≠tulo ${index + 1} em desenvolvimento...`;
    }
    return chapter;
  });

  if (issues.length > 0) {
    console.log(`‚ö†Ô∏è Problemas na estrutura: ${issues.join(', ')}`);
  }

  // Garantir n√∫mero m√≠nimo de cap√≠tulos
  while (bookData.chapters.length < expectedChapters) {
    bookData.chapters.push({
      title: `Cap√≠tulo ${bookData.chapters.length + 1}`,
      content: `Este cap√≠tulo est√° sendo desenvolvido com base na narrativa principal.`
    });
  }

  return bookData;
}

function createFallbackStructure(content: string, expectedChapters: number) {
  // Dividir conte√∫do em se√ß√µes l√≥gicas
  const sections = content.split(/(?=\n#|\nCap√≠tulo|\n\*\*|\n[0-9]+\.)/).filter(s => s.trim().length > 50);
  
  const chapters = sections.map((section, index) => {
    const lines = section.split('\n').filter(l => l.trim());
    const title = lines[0].replace(/^[#\*\s\d\.]+/, '').trim() || `Cap√≠tulo ${index + 1}`;
    const content = lines.slice(1).join('\n').trim() || section;
    
    return {
      title,
      content: content.length > 100 ? content : `Desenvolvimento do ${title}...`
    };
  });

  return {
    title: "Livro Criado por IA",
    synopsis: "Uma narrativa √∫nica desenvolvida atrav√©s de intelig√™ncia artificial.",
    chapters: chapters.slice(0, expectedChapters)
  };
}

export async function POST(request: NextRequest) {
  console.log('üöÄ INICIANDO GERA√á√ÉO DE LIVRO');
  
  try {
    const { description, size, genre, audience, chapterCount } = await request.json();

    // Log dos par√¢metros recebidos
    console.log('üìã PAR√ÇMETROS RECEBIDOS:', {
      size,
      genre,
      audience,
      chapterCount,
      descriptionLength: description?.length
    });

    // Valida√ß√µes robustas
    if (!description || description.trim().length < 15) {
      return NextResponse.json(
        { error: 'Descri√ß√£o muito curta. Forne√ßa pelo menos 15 caracteres para uma narrativa rica.' },
        { status: 400 }
      );
    }

    if (!size || !SIZE_CONFIG[size as keyof typeof SIZE_CONFIG]) {
      return NextResponse.json(
        { error: 'Tamanho inv√°lido. Use: small, medium, large ou epic.' },
        { status: 400 }
      );
    }

    const config = SIZE_CONFIG[size as keyof typeof SIZE_CONFIG];
    const finalChapterCount = chapterCount || parseInt(config.chapters.split('-')[1]);
    
    // C√°lculo e exibi√ß√£o de estimativa de tokens
    const tokenAnalysis = calculateTokenUsage(config, finalChapterCount);
    console.log(`üéØ AN√ÅLISE DE TOKENS: ${tokenAnalysis.recommendation}`);

    if (!tokenAnalysis.isWithinLimit) {
      console.warn('‚ö†Ô∏è AVISO: Est√° pr√≥ximo do limite de tokens');
    }

    // Prompt profissional e detalhado
    const professionalPrompt = `
# INSTRU√á√ïES PARA CRIA√á√ÉO DE LIVRO PROFISSIONAL

## ESPECIFICA√á√ïES DA OBRA:
- **T√çTULO**: Crie um t√≠tulo √∫nico e atraente
- **G√äNERO**: ${genre || 'Fic√ß√£o Liter√°ria'}
- **P√öBLICO-ALVO**: ${audience || 'Adulto'}
- **TAMANHO**: ${config.description}
- **CAP√çTULOS**: ${finalChapterCount} cap√≠tulos completos
- **PALAVRAS POR CAP√çTULO**: ${config.wordsPerChapter} palavras

## DESCRI√á√ÉO DO ENREDO:
"${description}"

## ESTRUTURA OBRIGAT√ìRIA:

### 1. T√çTULO (string)
- Criativo, memor√°vel e relacionado ao tema

### 2. SINOPSE (string - 200-400 palavras)
- Apresente os personagens principais
- Estabele√ßa o conflito central
- Descreva o cen√°rio e atmosfera
- Crie expectativa no leitor

### 3. CAP√çTULOS (array de objetos)
Cada cap√≠tulo DEVE conter:

#### T√çTULO DO CAP√çTULO (string)
- Sugestivo do conte√∫do
- Cria curiosidade

#### CONTE√öDO (string - ${config.wordsPerChapter} palavras)
**ESTRUTURA NARRATIVA COMPLETA:**
- **ABERTURA**: Cena inicial impactante
- **DESENVOLVIMENTO**: Progress√£o da trama com di√°logos
- **CL√çMAX**: Ponto de tens√£o m√°ximo no cap√≠tulo
- **RESOLU√á√ÉO**: Conclus√£o parcial ou gancho
- **DI√ÅLOGOS**: M√≠nimo 3-5 conversas significativas
- **DESCRI√á√ïES**: Ambiente, emo√ß√µes, sensa√ß√µes
- **EVOLU√á√ÉO**: Personagens devem mostrar crescimento

## REGRAS T√âCNICAS:
1. Use linguagem ${audience === 'Infantil' ? 'simples e l√∫dica' : 'rica e elaborada'}
2. Desenvolva personagens tridimensionais
3. Mantenha coer√™ncia narrativa
4. Crie tens√£o e suspense quando apropriado
5. Use descri√ß√µes sensoriais (visuais, auditivas, t√°teis)
6. Inclua elementos de ${genre} de forma aut√™ntica

## FORMATO DE RESPOSTA (STRICTO):
\`\`\`json
{
  "title": "T√≠tulo Completo do Livro",
  "synopsis": "Sinopse detalhada de 3-5 par√°grafos...",
  "chapters": [
    {
      "title": "T√≠tulo do Cap√≠tulo 1",
      "content": "Conte√∫do completo e detalhado do cap√≠tulo 1 com desenvolvimento narrativo completo, di√°logos e descri√ß√µes ricas..."
    }
  ]
}
\`\`\`

**IMPORTANTE**: Responda APENAS com o JSON v√°lido. N√£o inclua qualquer texto adicional.
`;

    console.log('ü§ñ SOLICITANDO GERA√á√ÉO √Ä OPENAI...');
    console.log(`üìä CONFIG: ${size.toUpperCase()} | ${finalChapterCount} cap√≠tulos | ${config.maxTokens} tokens`);

    const completion = await openai.chat.completions.create({
      model: size === 'epic' ? "gpt-3.5-turbo-16k" : "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "Voc√™ √© um escritor best-seller premiado. Sua especialidade √© criar narrativas profundas, personagens complexos e mundos imersivos. SEMPRE responda com JSON v√°lido e estruturado."
        },
        {
          role: "user", 
          content: professionalPrompt
        }
      ],
      max_tokens: config.maxTokens,
      temperature: 0.75,
      top_p: 0.9,
    });

    console.log('‚úÖ RESPOSTA DA OPENAI RECEBIDA');
    console.log(`üìù Tokens usados: ${completion.usage?.total_tokens || 'N/A'}`);

    const content = completion.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('OpenAI retornou resposta vazia');
    }

    // Processar conte√∫do
    const bookData = parseBookContent(content, finalChapterCount);
    
    // Estat√≠sticas finais
    const totalContentLength = bookData.chapters.reduce((sum: number, chapter: any) => 
      sum + (chapter.content?.length || 0), 0);
    
    console.log('üìà ESTAT√çSTICAS FINAIS:');
    console.log(`   ‚Ä¢ T√≠tulo: ${bookData.title}`);
    console.log(`   ‚Ä¢ Cap√≠tulos: ${bookData.chapters.length}`);
    console.log(`   ‚Ä¢ Total de caracteres: ${totalContentLength}`);
    console.log(`   ‚Ä¢ P√°ginas estimadas: ${Math.ceil(totalContentLength / 1800)}`);
    console.log(`   ‚Ä¢ Status: ‚úÖ GERA√á√ÉO CONCLU√çDA COM SUCESSO`);

    return NextResponse.json(bookData);

  } catch (error: any) {
    console.error('üí• ERRO CR√çTICO NA GERA√á√ÉO:', error);
    
    // An√°lise detalhada do erro
    const errorAnalysis = {
      message: error.message,
      code: error.code,
      status: error.status,
      type: error.type
    };
    
    console.log('üîç AN√ÅLISE DO ERRO:', errorAnalysis);

    // Tratamento espec√≠fico
    if (error?.code === 'insufficient_quota') {
      return NextResponse.json(
        { 
          error: 'Cota da API excedida.',
          solution: 'Verifique seu saldo em platform.openai.com/usage'
        },
        { status: 429 }
      );
    } else if (error?.status === 429) {
      return NextResponse.json(
        { 
          error: 'Muitas requisi√ß√µes simult√¢neas.',
          solution: 'Aguarde 1-2 minutos e tente novamente'
        },
        { status: 429 }
      );
    } else if (error?.message?.includes('JSON')) {
      return NextResponse.json(
        { 
          error: 'Problema no formato da resposta.',
          solution: 'Tente com uma descri√ß√£o mais clara ou menos complexa'
        },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Erro interno na gera√ß√£o do livro.',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      },
      { status: 500 }
    );
  }
}
