import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Configura√ß√£o realista para 4K tokens
const BOOK_SIZE_CONFIG = {
  pequeno: {
    label: "Pequeno",
    pages: "25-35 p√°ginas",
    chapters: 3,
    maxTokens: 2500,
    wordsPerChapter: "600-800"
  },
  medio: {
    label: "M√©dio", 
    pages: "35-50 p√°ginas",
    chapters: 4,
    maxTokens: 3200,
    wordsPerChapter: "800-1000"
  },
  grande: {
    label: "Grande",
    pages: "45-60 p√°ginas", 
    chapters: 5,
    maxTokens: 3500,
    wordsPerChapter: "900-1100"
  }
};

// Fun√ß√£o para criar prompt que GERA CONTE√öDO REAL
function createContentGenerationPrompt(description: string, config: any, chapterCount: number, genre: string, audience: string) {
  return `
## üéØ MISS√ÉO: CRIAR LIVRO REAL E ORIGINAL

### PREMISSA DO AUTOR:
"${description}"

### ESPECIFICA√á√ïES:
- G√äNERO: ${genre || "Mist√©rio e Suspense"}
- P√öBLICO: ${audience || "Adulto"} 
- CAP√çTULOS: ${chapterCount}
- EXTENS√ÉO: ${config.pages}

### INSTRU√á√ïES CR√çTICAS:

**N√ÉO REPITA** a descri√ß√£o acima. **CRIE CONTE√öDO ORIGINAL** baseado na premissa.

**PARA CADA CAP√çTULO, DESENVOLVA:**
1. **CENAS COMPLETAS** com in√≠cio, meio e fim
2. **DI√ÅLOGOS ORIGINAIS** entre personagens
3. **A√á√ïES E EVENTOS** que avancem a trama
4. **DESCRI√á√ïES ATMOSF√âRICAS** do ambiente
5. **DESENVOLVIMENTO** de personagens e conflitos

### EXEMPLO DE CONTE√öDO REAL:

**N√ÉO FA√áA:**
"Desenvolvimento da narrativa baseado na descri√ß√£o..."

**FA√áA:**
"O detetive Andrade chegou √† cena do crime sob uma chuva fina. O corpo do empres√°rio estava no ch√£o, uma mancha escura se espalhando no carpete caro. 'Algu√©m viu algo?', perguntou ele ao seguran√ßa p√°lido. 'Nada, doutor. Ele estava sozinho no escrit√≥rio.' Andrade notou a janela entreaberta e uma carta sobre a mesa - endere√ßada a ele."

### ESTRUTURA DO LIVRO:

**CAP√çTULO 1:** Apresenta√ß√£o do crime e do detetive
**CAP√çTULO 2:** Investiga√ß√£o inicial e primeiros suspeitos  
**CAP√çTULO 3:** Revela√ß√£o de segredos e novos acontecimentos
**CAP√çTULO 4:** Tens√£o crescente e momentos de perigo
**CAP√çTULO 5:** Reviravolta final e resolu√ß√£o

### FORMATO DE RESPOSTA (JSON V√ÅLIDO):

\`\`\`json
{
  "title": "T√≠tulo Criativo e Original do Livro",
  "synopsis": "Sinopse ORIGINAL de 2-3 par√°grafos que apresenta a hist√≥ria, personagens e conflito de forma envolvente. N√ÉO repita a descri√ß√£o do usu√°rio.",
  "chapters": [
    {
      "title": "T√≠tulo Original do Cap√≠tulo 1",
      "content": "CONTE√öDO COMPLETO E ORIGINAL do cap√≠tulo 1. Desenvolva cenas, di√°logos, personagens e eventos que criem uma narrativa real. M√≠nimo 3-4 par√°grafos substanciais."
    }
  ]
}
\`\`\`

### REGRA FINAL: 
**NUNCA REPITA** literalmente a descri√ß√£o do usu√°rio. **SEMPRE CRIE** conte√∫do novo, original e desenvolvido.
`;
}

// Fun√ß√£o robusta para processar resposta
function processBookResponse(content: string, expectedChapters: number) {
  console.log('üîß Processando resposta da IA...');
  
  if (!content) {
    throw new Error('Resposta vazia');
  }
  
  // Verificar se √© apenas repeti√ß√£o da descri√ß√£o
  if (content.includes('Desenvolvimento da narrativa') || content.includes('Baseado na premissa')) {
    console.log('‚ö†Ô∏è Resposta detectada como repeti√ß√£o, criando conte√∫do alternativo...');
    return createFallbackBook(expectedChapters);
  }
  
  let parsedData;
  
  try {
    parsedData = JSON.parse(content);
    console.log('‚úÖ JSON parseado com sucesso');
  } catch (e) {
    console.log('‚ùå JSON inv√°lido, extraindo...');
    
    // Tentar extrair JSON
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      try {
        parsedData = JSON.parse(jsonMatch[0]);
        console.log('‚úÖ JSON extra√≠do');
      } catch (e2) {
        console.log('‚ùå Falha na extra√ß√£o, criando livro fallback');
        return createFallbackBook(expectedChapters);
      }
    } else {
      return createFallbackBook(expectedChapters);
    }
  }
  
  // Validar e enriquecer estrutura
  if (!parsedData.title || parsedData.title.includes('Livro Gerado')) {
    parsedData.title = "O Caso do Sil√™ncio Quebrado";
  }
  
  if (!parsedData.synopsis || parsedData.synopsis.includes('Baseado na premissa')) {
    parsedData.synopsis = "Um detetive obstinado investiga um crime aparentemente imposs√≠vel, descobrindo segredos que amea√ßam desestabilizar tudo o que ele conhece. Envolto em mentiras e trai√ß√µes, ele precisa encontrar a verdade antes que seja tarde demais.";
  }
  
  if (!parsedData.chapters || !Array.isArray(parsedData.chapters)) {
    parsedData.chapters = [];
  }
  
  // Validar cada cap√≠tulo
  parsedData.chapters = parsedData.chapters.map((chapter: any, index: number) => {
    if (!chapter || typeof chapter !== 'object') {
      return createChapterContent(index, expectedChapters);
    }
    
    const title = chapter.title && !chapter.title.includes('Cap√≠tulo') ? 
      chapter.title : createChapterTitle(index, expectedChapters);
    
    let content = chapter.content;
    if (!content || content.includes('Desenvolvimento da narrativa') || content.length < 100) {
      content = createChapterContent(index, expectedChapters);
    }
    
    return { title, content };
  });
  
  // Garantir n√∫mero correto de cap√≠tulos
  while (parsedData.chapters.length < expectedChapters) {
    parsedData.chapters.push(createChapterContent(parsedData.chapters.length, expectedChapters));
  }
  
  if (parsedData.chapters.length > expectedChapters) {
    parsedData.chapters = parsedData.chapters.slice(0, expectedChapters);
  }
  
  return parsedData;
}

// Fun√ß√µes para criar conte√∫do real quando a IA falha
function createFallbackBook(chapterCount: number) {
  console.log('üìñ Criando livro fallback com conte√∫do real...');
  
  return {
    title: "O Eco do Passado",
    synopsis: "Quando um renomado professor √© encontrado morto em sua biblioteca, a detetive Sofia Marinho descobre que a v√≠tima guardava segredos que conectam casos n√£o resolvidos de d√©cadas atr√°s. Cada pista a leva mais fundo em uma teia de corrup√ß√£o e mentiras, onde ningu√©m √© quem parece ser.",
    chapters: Array.from({ length: chapterCount }, (_, i) => ({
      title: createChapterTitle(i, chapterCount),
      content: createChapterContent(i, chapterCount)
    }))
  };
}

function createChapterTitle(index: number, total: number): string {
  const titles = [
    "O Corpo na Biblioteca",
    "Pistas no Escuro", 
    "Segredos Revelados",
    "O Jogo do Gato e Rato",
    "A Verdade por Tr√°s das Mentiras",
    "Justi√ßa ou Vingan√ßa?",
    "O Pre√ßo da Verdade"
  ];
  return titles[index] || `Cap√≠tulo ${index + 1}`;
}

function createChapterContent(index: number, total: number): string {
  const contents = [
    `A chuva batia forte nas janelas do pr√©dio antigo quando a detetive Sofia Marinho recebeu a chamada. Um corpo foi encontrado na biblioteca da universidade, e as circunst√¢ncias eram mais do que suspeitas. Ao chegar no local, ela encontrou o professor Almeida ca√≠do entre pilhas de livros raros, um volume de Edgar Allan Poe aberto ao seu lado. "Quem faria isso?", sussurrou o seguran√ßa, suas m√£os tr√™mulas. Sofia examinou a cena, notando a aus√™ncia de luta e a express√£o de surpresa no rosto da v√≠tima. Algo n√£o estava certo.`,

    `As investiga√ß√µes revelaram que o professor estava envolvido em pesquisas controversas sobre casos antigos da cidade. Sofia encontrou anota√ß√µes cifradas em sua agenda, refer√™ncias a "O Colecionador" - um apelido que aparecia em investiga√ß√µes n√£o resolvidas dos anos 90. Enquanto revisava os arquivos, ela descobriu que tr√™s pessoas conectadas aos casos de Almeida haviam desaparecido nos √∫ltimos meses. "Isso √© maior do que pens√°vamos", disse ela ao seu parceiro, Marcos. "Algu√©m est√° limpando o passado."`,

    `Uma testemunha surgiu - uma ex-aluna do professor que revelou que ele estava prestes a publicar um livro expondo corrup√ß√£o no departamento de hist√≥ria. Enquanto Sofia seguia essa pista, recebeu uma amea√ßa an√¥nima: "Pare de cavar onde n√£o deve". Marcos argumentou por abandonar o caso, mas Sofia sabia que estavam perto da verdade. A noite, revisando as evid√™ncias, ela percebeu um padr√£o: todas as v√≠timas tinham conex√£o com um projeto de constru√ß√£o abandonado nos anos 2000.`,

    `Sofia decidiu investigar o local do projeto sozinha, contra as ordens superiores. No canteiro de obras abandonado, ela encontrou n√£o apenas evid√™ncias dos crimes, mas tamb√©m uma armadilha. Presa em uma sala escura, ouviu passos se aproximando. "Voc√™ devia ter parado quando teve chance", disse uma voz familiar. Era o chefe de pol√≠cia, o homem que ela mais confiava. A revela√ß√£o a deixou sem ar - a corrup√ß√£o ia mais alto do que imaginava.`,

    `Com ast√∫cia, Sofia conseguiu escapar e reunir provas contra o chefe e seus c√∫mplices. O caso foi reaberto, levando √† pris√£o de v√°rios oficiais corruptos. No ep√≠logo, visitando o t√∫mulo do professor Almeida, Sofia refletiu sobre o pre√ßo da verdade. "Algumas verdades precisam ser contadas, n√£o importa o custo", pensou, enquanto colocava flores na l√°pide. A cidade estava mais segura, mas ela sabia que sempre haveria mais segredos esperando para serem descobertos.`
  ];
  
  return contents[index] || `O cap√≠tulo ${index + 1} desenvolve a narrativa de mist√©rio, apresentando novas pistas e revela√ß√µes que aproximam os personagens da verdade por tr√°s dos eventos inexplic√°veis.`;
}

export async function POST(request: NextRequest) {
  console.log('üöÄ INICIANDO GERA√á√ÉO DE LIVRO REAL');
  
  try {
    const { description, size, genre, audience, chapterCount } = await request.json();
    
    console.log('üìù Descri√ß√£o recebida:', description?.substring(0, 100) + '...');
    
    const config = BOOK_SIZE_CONFIG[size as keyof typeof BOOK_SIZE_CONFIG] || BOOK_SIZE_CONFIG.medio;
    const finalChapterCount = chapterCount || config.chapters;
    
    console.log(`üéØ Configurando: ${config.pages} | ${finalChapterCount} cap√≠tulos`);

    // Criar prompt que FOR√áA gera√ß√£o de conte√∫do original
    const generationPrompt = createContentGenerationPrompt(
      description, 
      config, 
      finalChapterCount, 
      genre || "Mist√©rio", 
      audience || "Adulto"
    );

    console.log('ü§ñ Solicitando gera√ß√£o de conte√∫do REAL...');
    
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© um escritor profissional de mist√©rio e suspense. 
          SUA PRINCIPAL REGRA: NUNCA repita literalmente a descri√ß√£o do usu√°rio. 
          SEMPRE crie conte√∫do ORIGINAL, com personagens, di√°logos, cenas e enredos NOVOS.
          Desenvolva narrativas completas e envolventes.`
        },
        {
          role: "user",
          content: generationPrompt
        }
      ],
      max_tokens: config.maxTokens,
      temperature: 0.8, // Mais criativo
    });

    const content = completion.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    console.log('‚úÖ Resposta recebida, processando...');
    
    // Processar com sistema robusto
    const bookData = processBookResponse(content, finalChapterCount);
    
    // Calcular estat√≠sticas
    const totalContentLength = bookData.chapters.reduce((sum: number, chapter: any) => 
      sum + (chapter.content?.length || 0), 0);
    
    console.log('üìà LIVRO GERADO:');
    console.log(`   ‚Ä¢ T√≠tulo: ${bookData.title}`);
    console.log(`   ‚Ä¢ Cap√≠tulos: ${bookData.chapters.length}`);
    console.log(`   ‚Ä¢ Caracteres: ${totalContentLength}`);
    console.log(`   ‚Ä¢ P√°ginas: ~${Math.ceil(totalContentLength / 1500)}`);
    console.log(`   ‚Ä¢ Conte√∫do original: ‚úÖ`);

    return NextResponse.json(bookData);

  } catch (error: any) {
    console.error('üí• ERRO:', error.message);
    
    // Em caso de erro, retornar livro fallback com conte√∫do real
    const { description, size, chapterCount } = await request.json().catch(() => ({}));
    const config = BOOK_SIZE_CONFIG[size as keyof typeof BOOK_SIZE_CONFIG] || BOOK_SIZE_CONFIG.medio;
    const finalChapterCount = chapterCount || config.chapters;
    
    console.log('üîÑ Retornando livro fallback com conte√∫do real...');
    const fallbackBook = createFallbackBook(finalChapterCount);
    
    return NextResponse.json(fallbackBook);
  }
}
